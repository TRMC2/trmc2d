                    ---------------------------
                    tempd: a temperature daemon
                    ---------------------------

    This package contains the source code of tempd: a temperature
    daemon, based on libtrmc2, for driving the TRMC2 temperature
    controller. It also has the code for a couple of plugins
    (interpolate-linear.so and interpolate.so) to convert raw
    measurements to temperature by interpolating tabulated values.

REQUIREMENTS

    For building tempd, you will need libtrmc2 and its associated header
    file Trmc.h installed somewhere your compiler can find them. If they
    are installed somewhere gcc won't look, you will have to edit the
    Makefile and add the appropriate -I and -L options.

    For having readline support in tempd's shell mode, you will also
    need libreadline and libtermcap, which a quite standard.

    For the interpolate.so plugin, you will need GSL, the GNU Scientific
    Library, available from <URL:http://www.gnu.org/software/gsl/>. The
    simpler interpolate-linear.so does not have this dependency.

COMPILING

    If you do *not* want readline support in tempd, comment out the line
    `WITH_READLINE = yes' in the Makefile.

    Then type `make'. You will get tempd and interpolate-linear.so.

    If you have GSL and want to make interpolate.so, type `make
    interpolate.so'.

RUNNING

    Type `tempd -d' as root, then connect a client to TCP port 5025.

    Or type `tempd -s' as root and talk to it at the keyboard.

FILES

    README:             this file
    doc/:               documentation directory
        protocol.html:  the tempd language
        plugins.html:   writing plugins
    Makefile:           needed for `make'
    interpolate-linear.c:   sample plugin for linear interpolation
    interpolate.c:      interpolation plugin based on GSL
    *.c, *.h:           (save for the two above) source code of tempd

BUGS

    It doesn't work ;-). Well, not yet.

    Many commands are not yet implemented: they generate the error
    `NO_HANDLER' if they are recognized, and `NO_SUCH_COMMAND'
    otherwise. See interpreter.c for a list of what is actually
    available.

    The program won't try to initialize the TRMC2 unless you issue the
    `start' command. Then you can run it with neither root privileges
    nor a real TRMC2, just to get a feeling of the language. For
    example:

        $ ./tempd -s
        trmc2> *idn?
        tempd temperature server, Institut NEEL, Nov 2016
        trmc2> board:count?
        trmc2> error?
        _TRMC_NOT_INITIALIZED
        trmc2> so:initialize:it:please!
        trmc2> error?
        NO_SUCH_COMMAND
        trmc2> quit
        $

    You can also `telnet localhost 5025` and have the same kind of
    dialog with tempd.

    You can optionally use a Unix domain socket instead of a TCP port
    but then, if you kill tempd instead of asking it to `quit', it will
    not remove the socket. Next time you try to run tempd, it will exit
    immediately and you will see no error message... unless you look in
    your system's logs:

        # grep tempd /var/log/messages
        Jul 16 22:18:05 bonet tempd: bind: Address already in use

    Just remove the socket and restart tempd.

AUTHOR

    Edgar Bonet <bonet@grenoble.cnrs.fr>
